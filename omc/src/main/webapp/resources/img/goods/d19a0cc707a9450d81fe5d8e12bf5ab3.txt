--관리자
--상품 등록 
INSERT INTO GOODS (GD_NUM, GD_NAME, GD_PRICE, GD_DETAIL, GD_CATEGORY, GD_AMOUNT)	
VALUES (SEQ_GOODS_GD_NUM.NEXTVAL, #{GD_NAME}, #{GD_PRICE}, #{GD_DETAIL}, #{GD_CATEGORY}, #{GD_AMOUNT})	
	
--상품 등록 (이미지 등록)	
INSERT INTO GOODSIMAGES (GI_NUM, GD_NUM, GI_IMG)	
VALUES (SEQ_GOODSIMAGES_GI_NUM.NEXTVAL, GD_NUM, #{GI_IMG})	
	
--상품 삭제	
DELETE FROM GOODS WHERE GD_NUM=#{GD_NUM}	
	
--상품 수정	
UPDATE GOODS (GD_NAME, GD_PRICE, GD_DCPRICE, GD_DETAIL, GD_AMOUNT)	
SET (#{GD_NAME}, #{GD_PRICE}, #{GD_DCPRICE}, #{GD_DETAIL}, #{GD_AMOUNT})	

------------------------------------------------------------------------------------------------------------------------------------------------
--상품 상세	
SELECT GD_NUM, GD_NAME, GD_PRICE, GD_DCPRICE, GD_DETAIL, GD_HITCOUNT, GD_AMOUNT, GD_POINT	
FROM GOODS G INNER JOIN GOODSIMAGES GI	
ON G.GD_NUM = GI.GD_NUM;	
	
--상품 리스트 가져오기 (전체)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM ;	
	
--상품 리스트 가져오기 (카테고리)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM WHERE GD_CATEGORY=#{GD_CATEGORY};	
	
--상품 정보 한줄짜리 데이터 가져오기
SELECT * FROM GOODS G INNER JOIN CART C ON G.GD_NUM=C.GD_NUM;
	
--상품 검색 (이름)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM WHERE GD_NAME LIKE '%'||#{isSearch}||'%' ORDER BY GD_REGDATE DESC;	
	
--전체 상품 정렬 (낮은가격순)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM ORDER BY GD_NUM DESC;	
	
--전체 상품 정렬 (높은가격순)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM ORDER BY GD_NUM ASC;	
	
--전체 상품 정렬 (등록일순)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM ORDER BY GD_REGDATE DESC;	
	
--카테고리별 상품 정렬 (낮은가격순)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM WHERE GD_CATEGORY=#{GD_CATEGORY} ORDER BY GD_NUM DESC;	
	
--카테고리별 상품 정렬 (높은가격순)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM WHERE GD_CATEGORY=#{GD_CATEGORY} ORDER BY GD_NUM ASC;	
	
--카테고리별 상품 정렬 (등록일순)	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM WHERE GD_CATEGORY=#{GD_CATEGORY} ORDER BY GD_REGDATE DESC;	
	
--장바구니 상품 추가	
INSERT INTO CART (CT_NUM, MEM_NUM, GD_NUM, CT_AMOUNT, CT_PRICE)	
VALUES (SEQ_CART_CT_NUM.NEXTVAL, MEM_NUM, GD_NUM, #{CT_AMOUNT}, #{CT_PRICE})	
	
--주문	
--주문하기 위한 회원정보 가져오기	
SELECT MEM_NUM, MEM_NAME, MEM_PHONE, MEM_EMAIL, MEM_ZIPCODE, MEM_ADDRESS1, MEM_ADDRESSDETAIL, MEM_POINT
FROM MEMBERS WHERE MEM_NUM=#{MEM_NUM};
	
--배송지 관리 -> 배송지 추가	
INSERT INTO DELIVERY (DV_NUM, MEM_NUM, DV_TITLE, DV_NAME, DV_ZIPCODE, DV_ADDRESS, DV_ADDRESSDETAIL, DV_PHONE)	
VALUES (SEQ_DELIVERY_DV_NUM, #{MEM_NUM}, #{DV_TITLE}, #{DV_NAME}, #{DV_ZIPCODE}, #{DV_ADDRESS}, #{DV_ADDRESSDETAIL}, #{DV_PHONE})
	
--주문내역 생성	
INSERT INTO "ORDER"(OD_NUM, MEM_NUM, DV_NUM, OD_NAME1, OD_PHONE1, OD_PRICE, OD_NAME2, OD_PHONE2, OD_ZIPCODE, OD_ADDRESS, OD_ADDRESSDETAIL, GD_NUM, OD_AMOUNT)	
VALUES (SEQ_ORDER_OD_NUM.NEXTVAL, #{MEM_NUM}, #{DV_NUM}, #{OD_NAME1}, #{OD_PHONE1}, (SELECT CT_AMOUNT * CT_PRICE FROM CART WHERE MEM_NUM=#{MEM_NUM} AND OD_NUM=0), #{OD_NAME2}, #{OD_PHONE2} #{OD_ZIPCODE}, #{OD_ADDRESS}, #{OD_ADDRESSDETAIL}, #{GD_NUM}, #{OD_AMOUNT});	

--주문내역 생성 (비회원) "order" 테이블에 MEM_NUM 값이 NULL 일때	
INSERT NONMEMBERS (NMEM_NUM, OD_NAME, OD_NUM) VALUES (SEQ_NONMEMBERS_NMEM_NUM.NEXTVAL, #{OD_NAME}, #{OD_NUM});	

--결제진행상황	
UPDATE TABLE "ORDER"(OD_RESULT) SET '결제완료';	
UPDATE TABLE "ORDER"(OD_RESULT) SET '상품준비중';	
UPDATE TABLE "ORDER"(OD_RESULT) SET '배송중';	
UPDATE TABLE "ORDER"(OD_RESULT) SET '배송완료';	
UPDATE TABLE "ORDER"(OD_RESULT) SET '구매확정';	
UPDATE TABLE "ORDER"(OD_RESULT) SET '취소';	
	
--상품 교환/환불/취소	
INSERT INTO AFTERSERVICE (AS_NUM, OD_NUM, MEM_NUM, NMEM_NUM, AS_CATEGORY, AS_TITLE, AS_CONTENT, AS_ACCOUNT)	
VALUES (SEQ_AFTERSERVICE_AS_NUM.NEXTVAL, #{OD_NUM}, #{MEM_NUM}, #{NMEM_NUM}, #{AS_CATEGORY}, #{AS_TITLE}, #{AS_CONTENT}, #{AS_ACCOUNT});	
	
--페이징	
SELECT AAA.*	
FROM(SELECT COUNT(*) OVER() AS TOTAL_COUNT,AA.*	
FROM(SELECT ROW_NUMBER() OVER (ORDER BY IDX DESC) RNUM, IDX, TITLE, HIT_CNT, TO_CHAR(CREA_DTM, 'YYYY.MM.DD') AS CREA_DTM	
FROM TB_BOARD	
WHERE DEL_GB = 'N') AA) AAA	
WHERE AAA.RNUM BETWEEN #{START} AND #{END}	
	
--상품 리뷰 작성하기	
INSERT INTO GDREVIEW (RV_NUM, GD_NUM, MEM_NUM, RV_TITLE, RV_CONTENT, RV_GRADE, RV_IMAGE)	
VALUES (SEQ_REVIEW_RV_NUM, GD_NUM, MEM_NUM, #{RV_TITLE}, #{RV_CONTENT}, #{RV_GRADE}, #{RV_IMAGE});	
	
--상품 리뷰 작성을 위한 구매이력 검증	
SELECT MEM_NUM FROM "ORDER" WHERE OD_PAY='배송완료' AND MEM_NUM=#{MEM_NUM} AND GD_NUM=#{GD_NUM};	
	
—상품 리뷰 수정	
UPDATE GDREVIEW (SET RV_TITLE, RV_CONTENT, RV_IMAGE)	
SET (#{RV_TITLE}, #{RV_CONTENT}, #{RV_IMAGE})
WHERE MEM_NUM = #{MEM_NUM} AND RV_NUM= #{RV_NUM}
	
-- 상품 리뷰 삭제	
DELETE FROM GDREVIEW	
WHERE RV_NUM=#{RV_NUM} AND MEM_NUM=#{MEM_NUM}	
	
--상품 리뷰 가져오기	
SELECT * FROM GDREVIEW WHERE GD_NUM=#{GD_NUM}	
	
--상품 QNA 작성하기	
INSERT INTO GDQNA (GQ_NUM, GD_NUM, MEM_NUM, GQ_TITLE, GQ_CONTENT, GQ_DATE, GQ_FILE)	
VALUES (SEQ_GOODSQNA_GQ_NUM.NEXTVAL, #{GD_NUM}, #{MEM_NUM}, #{GQ_TITLE}, #{GQ_CONTENT}, SYSDATE, #{GQ_FILE});	
	
--QNA 수정	
UPDATE GDQNA (GQ_TITLE, GQ_CONTENT , GQ_FILE, GQ_CATEGORY)	
SET (#{GQ_TITLE}, #{GQ_CONTENT}, #{GQ_FILE}, #{GQ_CATEGORY})	
WHERE MEM_NUM = #{MEM_NUM} AND GQ_NUM= #{GQ_NUM}	
	
-- QNA 삭제	
DELETE FROM GDQNA	
WHERE GQ_NUM=#{GQ_NUM} AND MEM_NUM=#{MEM_NUM}	
	
--상품 QNA 가져오기	
SELECT * FROM GDQNA WHERE GD_NUM=#{GD_NUM}	
	
--상품 QNA 답변달기	
INSERT INTO GDQNA (GQ_COMMENT) VALUE #{GQ_COMMENT};	

------------------------------------------------------------------------------------------------------------------------------------------------------------------

-- FAQ 글목록	
<select id="FaqList" parameterType="hashmap">	
<![CDATA[  SELECT * FROM BOARD	
WHERE	
B_CATEGORY = 'F'	
]]>	
</select>	
--FAQ 글 상세보기	
<select id="FaqView" parameterType="hashmap" resultType="hashmap">	
<![CDATA[  SELECT * FROM BOARD	
WHERE	
B_CATEGORY = 'F' AND B_NUM = #{B_NUM}	
]]>	
</select>	
--FAQ 글쓰기	
<insert id="FaqWrite" parameterType="hashmap">	
<![CDATA[	
INSERT INTO BOARD (B_NUM, B_CATEGORY, B_TITLE, B_CONTENT, B_REGDATE, B_HITCOUNT)	
VALUES(SEQ_BOARD_B_NUM.NEXTVAL, 'F', #{B_TITLE}, #{B_CONTENT} , SYSDATE, 0 );	
]]>	
</insert>	
-- FAQ 수정	
--이벤트 수정	
UPDATE BOARD	
SET B_TITLE=#{B_TITLE},	
B_CONTENT=#{B_CONTENT}	
WHERE B_NUM=#{B_NUM}	
--FAQ삭제	
DELETE FROM BOARD	
WHERE B_NUM=#{B_NUM}	
-- 이벤트 글목록	
<select id="eventList" parameterType="hashmap">	
<![CDATA[  SELECT * FROM BOARD	
WHERE	
B_CATEGORY = 'E'	
]]>	
</select>	
--이벤트 글 상세보기	
<select id="eventView" parameterType="hashmap" resultType="hashmap">	
<![CDATA[  SELECT * FROM BOARD	
WHERE	
B_CATEGORY = 'E' AND B_NUM = #{B_NUM}	
]]>	
</select>	
--이벤트 글쓰기	
<insert id="eventWrite" parameterType="hashmap">	
<![CDATA[	
INSERT INTO BOARD	
(B_NUM, B_CATEGORY, B_TITLE, B_CONTENT, B_REGDATE, B_STARTDATE, B_ENDDATE, B_IMG1, B_IMG2, B_IMG3, B_IMG4, B_HITCOUNT, B_STATE)	
VALUES(SEQ_BOARD_B_NUM.NEXTVAL, 'E', #{B_TITLE} , #{B_CONTENT} , SYSDATE, #{B_STARTDATE} , #{B_ENDDATE}, #{B_IMG1}, #{B_IMG2}, #{B_IMG3}, #{B_IMG4}, 0, #{B_STATE} );	
</insert>	
--이벤트 수정	
UPDATE BOARD	
SET B_TITLE=#{B_TITLE},	
B_CONTENT=#{B_CONTENT}	
WHERE B_NUM=#{B_NUM}	
--이벤트 삭제	
DELETE FROM BOARD	
WHERE B_NUM=#{B_NUM}	
-- 공지사항 상세보기	
SELECT *	
FROM BOARD	
WHERE B_CATEGORY = ’N’ AND B_NUM = #{B_NUM}	
--공지사항 글목록	
<select id="noticeList" parameterType="hashmap">	
<![CDATA[  SELECT * FROM BOARD	
WHERE	
B_CATEGORY = 'N' AND B_NUM = #{B_NUM}	
]]>	
</select>	
--공지사항 글쓰기	
<insert id="noticeWrite" parameterType="hashmap">	
<![CDATA[	
INSERT INTO BOARD (B_NUM, B_CATEGORY, B_TITLE, B_CONTENT, B_REGDATE, B_IMG1, B_HITCOUNT)	
VALUES(SEQ_BOARD_B_NUM.NEXTVAL, 'N', #{B_TITLE}, #{B_CONTENT} , SYSDATE, #{B_IMG1}, 0 );	
]]>	
</insert>	
-- 공지사항 수정	
"UPDATE BOARD	
SET B_TITLE = #{B_TITLE}, B_CONTENT =#{B_CONTENT}, B_IMG1=#{B_IMG1}	
WHERE B_NUM = #{B_NUM}"	
-- 공지사항 삭제	
DELETE	
FROM BOARD	
WHERE B_NUM = #{B_NUM}	
-- 공지사항 페이징
SELECT				
AAA.*				
FROM(				
SELECT COUNT(*) OVER() AS TOTAL_COUNT,				
AA.*				
FROM(				
SELECT				
ROW_NUMBER() OVER (ORDER BY B_NUM DESC) RNUM,				
B_NUM,B_TITLE,B_HITCOUNT,B_REGDATE				
FROM BOARD				
) AA				
) AAA				
WHERE AAA.RNUM BETWEEN 0 AND 20				

-- insertQNA(1대1문의글입력)	
INSERT INTO QNA(QNA_NUM,QNA_CATEGORY,QNA_TITLE,QNA_CONTENT,MEM_NUM,QNA_DATE,QNA_FILE,QNA_CHECK)	
VALUES(SEQ_QNA_QNA_NUM.NEXTVAL,#{QNA_CATEGORY},#{QNA_TITLE},#{QNA_CONTENT},#{MEM_NUM},SYSDATE,#{QNA_FILE},’N’)	
-- selectQNA (1대1문의 조회)	
SELECT *	
FROM QNA	
WHERE MEM_NUM = #{MEM_NUM}	
커뮤니티	
-- 커뮤니티 게시글 작성	
"INSERT INTO COMMUNITY(CM_NUM,CM_TITLE,CM_CONTENT,MEM_NUM,CM_DATE,CM_FILE)	
VALUES(SEQ_COMMUNITY_CM_NUM.NEXTVAL,#{CM_TITLE},#{CM_CONTENT},#{MEM_NUM},SYSDATE,#{CM_FILE)"	
-- 커뮤니티 게시글 조회	
"SELECT *	
FROM COMMUNITY	
WHERE CM_NUM = #{CM_NUM}"	
-- 커뮤니티 게시글 수정	
UPDATE COMMUNITY	
SET CM_TITLE = #{CM_TITLE}, CM_CONTENT = #{CM_CONTENT}, CM_FILE = #{CM_FILE}	
WHERE CM_NUM = #{CM_NUM}	
-- 커뮤니티 게시글 삭제	
"DELETE	
FROM COMMUNITY	
WHERE CM_NUM = #{CM_NUM}"	
--커뮤니티 페이징	
SELECT			
AAA.*			
FROM(			
SELECT COUNT(*) OVER() AS TOTAL_COUNT,			
AA.*			
FROM(			
SELECT			
ROW_NUMBER() OVER (ORDER BY CM_NUM DESC) RNUM,			
CM_NUM,CM_TITLE,CM_DATE			
FROM COMMUNITY			
) AA			
) AAA			
WHERE AAA.RNUM BETWEEN 0 AND 20	;		
--댓글쓰기	
INSERT INTO COM_COMMENT(CC_NUM, CM_NUM, MEM_NUM, CC_COMMENT, CC_DATE)	
VALUES(SEQ_COM_COMMENT_CC_NUM.NEXTVAL, #{CM_NUM}, #{MEM_NUM}, #{CC_COMMENT}, SYSDATE);	
--댓글목록	
SELECT * FROM COM_COMMENT	
WHERE CM_NUM=#{CM_NUM}	
--댓글수정	
UPDATE COM_COMMENT SET CC_COMMENT=#{CC_COMMENT}	
WHERE CC_NUM=#{CC_NUM}	
--댓글삭제	
DELETE FROM COM_COMMENT	
WHERE CC_NUM=#{CC_NUM}	
	
<MEMBER>	
1. 회원가입	
<insert id="insertMember" parameterType="hashmap">	
<![CDATA[	
INSERT INTO	
MEMBERS(MEM_NUM,MEM_ID,MEM_PW,MEM_NAME,MEM_PHONE,MEM_EMAIL,MEM_JUMIN1,MEM_JUMIN2,MEM_ADDRESS1,MEM_ADDRESS11,MEM_ZIPCODE1)	
VALUES(SEQ_MEMBERS_MEM_NUM.NEXTVAL,#{MEM_ID},#{MEM_PW},#{MEM_NAME},#{MEM_PHONE},#{MEM_EMAIL},#{MEM_JUMIN1},#{MEM_JUMIN2},#{MEM_ADDRESS1},#{MEM_ADDRESS11},#{MEM_ZIPCODE1},)	
]]>	
</insert>	
	
2. 아이디 중복검사	
<select id="selectMemberId" parameterType="hashmap" resultType="hashmap">	
<![CDATA[	
SELECT *	
FROM	
MEMBERS	
WHERE	
MEM_ID= #{MEM_ID}	
]]>	
</select>	
	
3. 주민번호 중복검사	
<select id="selectMemberJumin" parameterType="hashmap" resultType="hashmap">	
<![CDATA[	
SELECT *	
FROM	
MEMBERS	
WHERE	
MEM_JUMIN1= #{MEM_JUMIN1} AND MEM_JUMIN2 = #{MEM_JUMIN2}	
]]>	
</select>	
-----------------------------------------	
<ADMIN>	
1-1. 회원리스트	
<select id="memberList" resultType="hashmap">	
<![CDATA[	
SELECT *	
FROM	
MEMBERS	
]]>	
</select>	
	
1-2. 회원리스트 페이징	
<select id="memberListPaging" parameterType="hashmap" resultType="hashmap">	
<![CDATA[	
SELECT *	
FROM (	
SELECT MEM_ID, MEM_JOINDATE, MEM_NAME, MEM_PHONE, MEM_EMAIL, ROWNUM R	
FROM (	
SELECT	
MEM_ID, MEM_JOINDATE, MEM_NAME, MEM_PHONE, MEM_EMAIL	
FROM	
MEMBERS	
ORDER BY MEM_JOINDATE ASC	
)	
ORDER BY R	
)	
WHERE	
R BETWEEN #{START} AND #{END}	
]]>	
</select>	
	
1-3. 회원리스트 검색페이징	
<select id="memberListSearchPaging" parameterType="hashmap" resultType="hashmap">	
<![CDATA[	
SELECT *	
FROM (	
SELECT MEM_ID, MEM_JOINDATE, MEM_NAME, MEM_PHONE, MEM_EMAIL, ROWNUM R	
FROM (	
SELECT	
MEM_ID, MEM_JOINDATE, MEM_NAME, MEM_PHONE, MEM_EMAIL	
FROM	
MEMBERS	
<where>	
<if test="KEYWORD!=NULL">	
<if test="CONDITION.equals('MEM_EMAIL')">	
EMAIL LIKE '%'||#{KEYWORD}||'%'	
</if>	
<if test="CONDITION.equals('MEM_NAME')">	
NAME LIKE '%'||#{KEYWORD}||'%'	
</if>	
<if test="CONDITION.equals('MEM_ID')">	
RANK LIKE '%'||#{KEYWORD}||'%'	
</if>	
<if test="CONDITION.equals('MEM_PHONE')">	
RANK LIKE '%'||#{KEYWORD}||'%'	
</if>	
</if>	
	
</where>	
ORDER BY MEM_JOINDATE ASC	
)	
ORDER BY R	
)	
WHERE	
R BETWEEN #{START} AND #{END}	
]]>	
</select>	
	
1-4. 회원수	
<select id="memberSearchCount" parameterType="hashmap" resultType="hashmap">	
SELECT	
COUNT(*) COUNT	
FROM	
MEMBER	
</select>	
	
1-5. 회원상세	
<select id="memberDetail" resultType="hashmap">	
<![CDATA[	
SELECT *	
FROM	
MEMBERS	
WHERE	
MEM_ID=#{MEM_ID}	
]]>	
</select>	
1-6. 회원정보수정	
<update id="updateMember" parameterType="hashmap" >	
<![CDATA[	
UPDATE	
MEMBERS	
SET	
MEM_PW = #{MEM_PW},	
MEM_NAME = #{MEM_NAME},	
MEM_ZIPCODE = #{MEM_ZIPCODE},	
MEM_ADDRESS = #{MEM_ADDRESS},	
MEM_ADDRESSDETAIL = #{MEM_ADDRESSDETAIL},	
MEM_PHONE =#{MEM_PHONE},	
MEM_EMAIL=#{MEM_EMAIL}	
MEM_RANK=#{MEM_RANK},	
MEM_POINT=#{MEM_POINT},	
MEM_TEST=#{MEM_TEST},	
MEM_STOP=#{MEM_STOP}	
WHERE	
MEM_ID=#{MEM_ID}	
]]>	
</update>	
	
1-7. 회원탈퇴	
<delete id="deleteMember" parameterType="hashmap">	
<![CDATA[	
DELETE	
FROM	
MEMBERS	
WHERE	
MEM_ID=#{MEM_ID}	
]]>	
</delete>	
	
—테스트용 쿼리	
SELECT * FROM GOODS G INNER JOIN GOODSIMAGES GI ON G.GD_NUM=GI.GD_NUM WHERE GD_CATEGORY='양식' ORDER BY GD_REGDATE DESC;	
	
INSERT INTO GOODSIMAGES (GI_NUM, GD_NUM, GI_IMG)	
VALUES (SEQ_GOODSIMAGES_GI_NUM.NEXTVAL, 3, '가나다라마바사');	
INSERT INTO GOODSIMAGES (GI_NUM, GD_NUM, GI_IMG)	
VALUES (SEQ_GOODSIMAGES_GI_NUM.NEXTVAL, 4, '아차자자나');	
INSERT INTO GOODSIMAGES (GI_NUM, GD_NUM, GI_IMG)	
VALUES (SEQ_GOODSIMAGES_GI_NUM.NEXTVAL, 5, '어어너언어아ㅓ');	
INSERT INTO GOODSIMAGES (GI_NUM, GD_NUM, GI_IMG)	
VALUES (SEQ_GOODSIMAGES_GI_NUM.NEXTVAL, 6, '자자자주자저젖ㅇ');	
INSERT INTO GOODSIMAGES (GI_NUM, GD_NUM, GI_IMG)	
VALUES (SEQ_GOODSIMAGES_GI_NUM.NEXTVAL, 7, 'CLFQJS');	
	
DELETE FROM GOODS WHERE GD_NUM=2;	